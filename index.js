'use strict';

/*
Задание 1
Представьте, что у вас есть класс для управления библиотекой. В этом классе будет приватное свойство для хранения
списка книг, а также методы для добавления книги, удаления книги и получения информации о наличии книги.

Класс должен содержать приватное свойство #books, которое инициализируется пустым массивом и представляет собой
список книг в библиотеке.

Реализуйте геттер allBooks, который возвращает текущий список книг.

Реализуйте метод addBook(title), который позволяет добавлять книгу в список. Если книга с таким названием уже
существует в списке, выбросьте ошибку с соответствующим сообщением.

Реализуйте метод removeBook(title), который позволит удалять книгу из списка по названию. Если книги с таким
названием нет в списке, выбросьте ошибку с соответствующим сообщением.

Реализуйте метод hasBook(title), который будет проверять наличие книги в библиотеке и возвращать true или false в
зависимости от того, есть ли такая книга в списке или нет.

Реализуйте конструктор, который принимает начальный список книг (массив) в качестве аргумента. Убедитесь,
что предоставленный массив не содержит дубликатов; в противном случае выбрасывайте ошибку.
 */

class book {
    constructor(title, author, year) {
        this.title = title;
        this.author = author;
        this.year = year;
    }
}

class library {
    #books = [];
    constructor(books) {
        const uniqueBooks = new Set(books.map(book => book.title));
        if (books.length !== uniqueBooks.size) {
            throw new Error('Список книг содержит дубликаты');
        }
        this.#books = books;
    }

    get allBooks() {
        return this.#books;
    }

    addBook(title, author, year) {
        if (this.hasBook(title)) {
            throw new Error('Книга с таким названием уже существует в списке');
        }
        this.#books.push(new book(title, author, year));
    }
    removeBook(title) {
        if (!this.hasBook(title)) {
            throw new Error('Книги с таким названием нет в списке');
        }
        this.#books = this.#books.filter(book => book.title !== title);
    }
    hasBook(title) {
        return this.#books.some(book => book.title === title);
    }
    getBookByTitle(title) {
        return this.#books.find(book => book.title === title);
    }
}

const arrayBooks = [
    new book('Гарри Поттер', 'Джоан Роулинг', 1990),
    new book('Гарри Поттер и философский камень', 'Джоан Роулинг', 1991),
    new book('Гарри Поттер и тайная комната', 'Джоан Роулинг', 1992),
    new book('Гарри Поттер и узник Азкабана', 'Джоан Роулинг', 1993),
    new book('Гарри Поттер и орден Феникса', 'Джоан Роулинг', 1994),
    new book('Гарри Поттер и кубок огня', 'Джоан Роулинг', 1995),
    new book('Гарри Поттер и орден ниндзя', 'Джоан Роулинг', 1996),
    new book('Гарри Поттер и принц-полукровка', 'Джоан Роулинг', 1997),
    new book('Гарри Поттер и дары смерти', 'Джоан Роулинг', 1998),
    new book('Гарри Поттер и узник змея', 'Джоан Роулинг', 1999),
    new book('Гарри Поттер и когтевропа', 'Джоан Роулинг', 2000),
];
// =================================================================
const library1 = new library(arrayBooks);
library1.removeBook('Гарри Поттер и философский камень');
library1.addBook('Гарри Поттер и философский камень', 'Джоан Роулинг', 1991);
console.log('hasBook: ' + library1.hasBook('Гарри Поттер и философский камень'));
// =================================================================
library1.allBooks.forEach(book =>
    console.log('Книга: ' + book.title + ' Автор: ' + book.author + ' Год: ' + book.year)
);


/*
Задание 2
Вы разрабатываете систему отзывов для вашего веб-сайта. Пользователи могут оставлять отзывы,
но чтобы исключить слишком короткие или слишком длинные сообщения, вы решаете установить некоторые ограничения.

Создайте HTML-структуру с текстовым полем для ввода отзыва, кнопкой для отправки и контейнером,
где будут отображаться отзывы.

Напишите функцию, которая будет добавлять отзыв в контейнер с отзывами. Однако если длина введенного
отзыва менее 50 или более 500 символов, функция должна генерировать исключение.

При добавлении отзыва, он должен отображаться на странице под предыдущими отзывами, а не заменять их.

const initialData = [
{
product: "Apple iPhone 13",
reviews: [
{
id: "1",
text: "Отличный телефон! Батарея держится долго.",
},
{
id: "2",
text: "Камера супер, фото выглядят просто потрясающе.",
},
],
},
{
product: "Samsung Galaxy Z Fold 3",
reviews: [
{
id: "3",
text: "Интересный дизайн, но дорогой.",
},
],
},
{
product: "Sony PlayStation 5",
reviews: [
{
id: "4",
text: "Люблю играть на PS5, графика на высоте.",
},
],
},
];

Вы можете использовать этот массив initialData для начальной загрузки данных при запуске вашего приложения.
 */